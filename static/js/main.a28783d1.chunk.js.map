{"version":3,"sources":["NoteList/NoteList.js","Header/Header.js","MainPage/Main.js","serviceWorker.js","index.js"],"names":["NoteList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","content","handleOnItemClick","nextProps","nextState","noteTotalSize","notes","length","_this2","items","map","note","react_default","a","createElement","ListItem_default","onClick","bind","Avatar_default","Image_default","ListItemText_default","primary","name","secondary","date","className","List_default","Component","Header","Main","state","input","baseUrl","axios","get","then","responses","setState","data","response","push","decodeURIComponent","escape","window","atob","console","log","src_Header_Header","src_NoteList_NoteList","react_markdown_default","source","Boolean","location","hostname","match","ReactDOM","render","src_MainPage_Main","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a28783d1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport WorkIcon from '@material-ui/icons/Work';\r\nimport BeachAccessIcon from '@material-ui/icons/BeachAccess';\r\n\r\nclass NoteList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    shouldComponentUpdate(nextProps,nextState){\r\n        return this.props.noteTotalSize == nextProps.notes.length;\r\n    }\r\n    render(){\r\n        var notes=this.props.notes;\r\n        var items = notes.map((note)=>{\r\n            return (<ListItem onClick={this.handleClick.bind(this,note.content)}>\r\n                <Avatar>\r\n                    <ImageIcon />\r\n                </Avatar>\r\n                <ListItemText primary={note.name} secondary={note.date} />\r\n            </ListItem>)\r\n        });\r\n        return (\r\n            <div className='NodeList'>\r\n                <List >\r\n                    {items}\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\n    handleClick = (content) => {\r\n        //console.log(e)\r\n        this.props.handleOnItemClick(content);\r\n    } \r\n}\r\n\r\nexport default NoteList;\r\n/**\r\n<ListItem>\r\n    <Avatar>\r\n        <ImageIcon />\r\n    </Avatar>\r\n    <ListItemText primary=\"Photos\" secondary=\"Jan 9, 2014\" />\r\n</ListItem>\r\n    <ListItem>\r\n        <Avatar>\r\n            <WorkIcon />\r\n        </Avatar>\r\n        <ListItemText primary=\"Work\" secondary=\"Jan 7, 2014\" />\r\n    </ListItem>\r\n    <ListItem>\r\n        <Avatar>\r\n            <BeachAccessIcon />\r\n        </Avatar>\r\n        <ListItemText primary=\"Vacation\" secondary=\"July 20, 2014\" />\r\n    </ListItem>\r\n\r\n    */","import React, { Component } from 'react';\r\nimport './Header.css';\r\n\r\n\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Header\">\r\n                \r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport './Main.css';\r\n\r\nimport MarkDown from 'react-markdown';\r\nimport axios from 'axios';\r\nimport NoteList from '../NoteList/NoteList'\r\nimport Header from '../Header/Header'\r\n\r\nclass Main extends Component {\r\n    state={input:'',notes:[],noteTotalSize:0}\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount(){\r\n        var baseUrl = 'https://api.github.com/repos/rayshaw001/books/contents/Note/';\r\n        var notes=[];\r\n        axios.get(baseUrl)\r\n            .then(responses => {\r\n                this.setState({noteTotalSize:responses.data.length});\r\n                responses.data.map(note=>{\r\n                    axios.get(baseUrl+note.name).then(response=>{\r\n                        notes.push({\r\n                            name: response.data.name,\r\n                            content: decodeURIComponent(escape(window.atob(response.data.content))),\r\n                            date:''\r\n                        })\r\n                        this.setState({ notes: notes })\r\n                    })\r\n                })\r\n            })\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps,nextState){\r\n        return nextState.notes.length == this.state.noteTotalSize || this.state.input != nextState.input;\r\n    }\r\n\r\n    render() {\r\n        console.log(this)\r\n        return (\r\n            <div className=\"Main\">\r\n                <Header />\r\n                <div className='body'>\r\n                    <NoteList notes={this.state.notes} handleOnItemClick={this.handleOnItemClick} noteTotalSize={this.state.noteTotalSize}/>\r\n                    <MarkDown className='markdown' source={this.state.input} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleOnItemClick(content){\r\n        this.setState({ input: content})\r\n        /*\r\n        axios.get('https://api.github.com/repos/rayshaw001/books/contents/Note/K8s%20%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97.md')\r\n            .then(res => {\r\n                var text = decodeURIComponent(escape(window.atob(res.data.content))) \r\n            }\r\n        )\r\n        */\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './MainPage/Main';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}