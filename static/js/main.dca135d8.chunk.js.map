{"version":3,"sources":["NoteList/NoteList.js","Header/Header.js","MainPage/Main.js","serviceWorker.js","index.js"],"names":["NoteList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectedItem","handleClick","content","index","setState","handleOnItemClick","gitBaseUrl","notes","map","note","folder","axios","get","name","then","response","push","data","decodeURIComponent","escape","window","atob","_this2","items","react_default","a","createElement","menu","SubMenu","key","title","bind","Item","selected","onClick","className","Component","Header","handleOnClick","link","location","index_es","alt","src","Main","input","noteTotalSize","responses","length","nextProps","nextState","console","log","src_Header_Header","src_NoteList_NoteList","react_markdown_default","source","Boolean","hostname","match","ReactDOM","render","src_MainPage_Main","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dca135d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { Menu, Icon, Button } from 'antd';\r\nimport axios from 'axios';\r\nimport './NoteList.css'\r\n\r\nclass NoteList extends Component {\r\n    state={\r\n        selectedItem:-1\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount(){\r\n        var gitBaseUrl ='https://api.github.com/repos/rayshaw001/books/contents/Note/';\r\n        var notes=this.props.notes.map((note,index)=>{\r\n            if(note.folder){\r\n                note[\"notes\"]=[];\r\n                axios.get(gitBaseUrl + note.name).then(response => {\r\n                    note[\"notes\"].push({\r\n                        name: response.data.name,\r\n                        folder: false\r\n                    });\r\n                    return note;\r\n                })\r\n            }else{\r\n                axios.get(gitBaseUrl + note.name).then(response => {\r\n                    note[\"content\"] = decodeURIComponent(escape(window.atob(response.data.content)));\r\n                    return note;\r\n                })\r\n            }\r\n        })\r\n    }\r\n    render(){\r\n        var notes=this.props.notes;\r\n        var items = notes.map((note,index)=>{\r\n            if(!note.folder){\r\n                return (\r\n                <Menu.Item\r\n                        selected={this.state.selectedItem === index}\r\n                        onClick={this.handleClick.bind(this,note.content,index)}>\r\n                    <span>{note.name}</span>\r\n                </Menu.Item> \r\n                )\r\n            } else {\r\n                return (\r\n                    <Menu.SubMenu key=\"sub1\" title={<span>{note.name}</span>}>\r\n                        <NoteList notes={note.notes} handleOnItemClick={this.handleClick.bind(this)} />\r\n                    </Menu.SubMenu>\r\n                )\r\n            }\r\n\r\n        });\r\n        return (\r\n            <div className=\"NoteList\">\r\n                <Menu >\r\n                    {items}\r\n                </Menu>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\n    handleClick = (content,index) => {\r\n        //console.log(e)\r\n        this.setState({\r\n            selectedItem:index\r\n        })\r\n        this.props.handleOnItemClick(content);\r\n    } \r\n}\r\n\r\nexport default NoteList;\r\n\r\n/**\r\n * \r\n *\r\n                                content: decodeURIComponent(escape(window.atob(response.data.content))),\r\n */","import React, { Component } from 'react';\r\nimport './Header.css';\r\nimport { Avatar } from '@material-ui/core';\r\n\r\n\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n\r\n    render() {\r\n        let AvatarUrl = 'https://avatars3.githubusercontent.com/u/15726041';\r\n        let gitPageUrl = \"https://rayshaw001.github.io\";\r\n        return (\r\n            <div className=\"Header\">\r\n                <Avatar\r\n                    onClick={this.handleOnClick.bind(this, gitPageUrl)}\r\n                    alt=\"Ray Shaw\"\r\n                    src={AvatarUrl}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleOnClick = (link) =>{\r\n        window.location=link;\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport './Main.css';\r\n\r\nimport MarkDown from 'react-markdown';\r\nimport axios from 'axios';\r\nimport NoteList from '../NoteList/NoteList';\r\nimport Header from '../Header/Header';\r\n\r\nclass Main extends Component {\r\n    state={input:'',notes:[],noteTotalSize:0}\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount(){\r\n        var baseUrl = 'https://api.github.com/repos/rayshaw001/books/contents/Note/';\r\n        var notes=[];\r\n        axios.get(baseUrl)\r\n            .then(responses => {\r\n                this.setState({noteTotalSize:responses.data.length});\r\n                responses.data.map(note=>{\r\n                    notes.push({\r\n                        name: note.name,\r\n                        folder: false\r\n                    })\r\n                    this.setState({ notes: notes })\r\n                })\r\n            })\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps,nextState){\r\n        return nextState.notes.length === this.state.noteTotalSize || this.state.input !== nextState.input;\r\n    }\r\n\r\n    render() {\r\n        console.log(this)\r\n        return (\r\n            <div className=\"Main\">\r\n                <Header />\r\n                <div className='body'>\r\n                    <NoteList notes={this.state.notes} handleOnItemClick={this.handleOnItemClick.bind(this)}/>\r\n                    <MarkDown className='markdown' source={this.state.input} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleOnItemClick(content){\r\n        this.setState({ input: content})\r\n        /*\r\n        axios.get('https://api.github.com/repos/rayshaw001/books/contents/Note/K8s%20%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97.md')\r\n            .then(res => {\r\n                var text = decodeURIComponent(escape(window.atob(res.data.content))) \r\n            }\r\n        )\r\n        */\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './MainPage/Main';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}