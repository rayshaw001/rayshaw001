{"version":3,"sources":["logo.svg","AboutMe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AboutMe","react_default","a","createElement","className","id","href","xmlns","version","height","width","points","style","type","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_AboutMe_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mQC8BzBC,gMAzBP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,QACJJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,KAAd,oCACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,KAAd,qBAAoCH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,IAAIE,KAAK,iCAAtB,eACpCL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,KAAd,wBAAuCH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,IAAIE,KAAK,mCAAtB,eACvCL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,KAAd,uBAAsCH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,IAAIE,KAAK,oCAAtB,eACtCL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,KAAd,qCAAoDH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,IAAIE,KAAK,gDAAtB,aAEpDL,EAAAC,EAAAC,cAAA,OAAKI,MAAM,6BAA6BC,QAAQ,MAAMC,OAAO,MAAMC,MAAM,QACrET,EAAAC,EAAAC,cAAA,YAAUQ,OAAO,yZACbC,MAAM,oFAEdX,EAAAC,EAAAC,cAAA,MAAIC,UAAU,KAAd,iCAEJH,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,UAAQU,KAAK,kBAAkBC,IAAI,sBACnCb,EAAAC,EAAAC,cAAA,UAAQU,KAAK,kBAAkBC,IAAI,kBACnCb,EAAAC,EAAAC,cAAA,UAAQU,KAAK,kBAAkBC,IAAI,oCArB7BC,cCEJA,YCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAAaC,SAASC,eAAe,SDiH/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d375e1f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport './AboutMe.css';\r\n\r\nclass AboutMe extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"AboutMe\">\r\n                <div id=\"home\">\r\n                    <div className=\"div\">\r\n                    <h1 className=\"h\">Welcome to my Personal Git Page </h1>\r\n                    <h2 className=\"h\">My Github Page is <a className=\"a\" href=\"https://github.com/rayshaw001\">rayshaw001</a></h2>\r\n                    <h2 className=\"h\">My CSDN blog Page is <a className=\"a\" href=\"http://blog.csdn.net/rayshaw001\">rayshaw001</a></h2>\r\n                    <h2 className=\"h\">My leetcode Page is <a className=\"a\" href=\"https://leetcode.com/rayshaw001/\">rayshaw001</a></h2>\r\n                    <h2 className=\"h\">My Netease Cloud Music Account is <a className=\"a\" href=\"http://music.163.com/#/user/home?id=74132453\">RayShaw</a></h2>\r\n                    </div>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" height=\"800\" width=\"auto\">\r\n                        <polyline points=\"0,400 40,100 80,600 120,155 160,477 200,55 240,555 280,100 320,666 360,234 400,555 440,277 480,555 520,123 560,722 600,100 640,600 680,155 720,477 760,55 800,555 840,300 880,700 920,321 960,567 1000,77 1040,585 1080,355 1120,800 1160,100 1200,600 1240,155 1280,477 1320,55 1360,555 1400,400 1440,100 1480,600 1520,155 1560,477 1600,55 1640,555 1680,120 1720,700 1760,100 1800,800 1840,150 1880,650 1920,300\"\r\n                            style=\"fill:transparent;stroke:#01A982;stroke-width:3;fill-rule:evenodd;repeat-x:true\" />\r\n                    </svg>\r\n                    <h1 className=\"h\">Thanks for your coming @_@~ </h1>\r\n                </div>   \r\n                <canvas></canvas>\r\n                <script type=\"text/javascript\" src=\"./js/three.min.js\"></script>\r\n                <script type=\"text/javascript\" src=\"./js/index.js\"></script>\r\n                <script type=\"text/javascript\" src=\"./js/three-waves.min.js\"></script>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AboutMe;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AboutMe from './AboutMe'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Ray Shaw's Git Page power by reactjs\n          </p>\n          more details are coming...\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport AboutMe from './AboutMe';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AboutMe />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}