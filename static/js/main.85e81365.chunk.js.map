{"version":3,"sources":["NoteList/NoteList.js","Header/Header.js","MainPage/Main.js","serviceWorker.js","index.js"],"names":["NoteList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleClick","note","index","gitBaseUrl","that","assertThisInitialized","folder","items","subitems","length","_notes","notes","axios","get","fullPath","then","response","data","map","item","idx","noteNameIndex","name","toLocaleLowerCase","lastIndexOf","push","substring","type","setState","content","handleOnItemClick","decodeURIComponent","escape","window","atob","selectedItem","nextProps","_this2","react_default","a","createElement","menu","SubMenu","key","title","icon","theme","onTitleClick","bind","Item","onClick","selected","className","mode","Component","Header","handleOnClick","link","location","index_es","alt","src","Main","input","noteTotalSize","responses","nextState","src_Header_Header","src_NoteList_NoteList","react_markdown_default","source","Boolean","hostname","match","ReactDOM","render","src_MainPage_Main","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.85e81365.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Menu, Icon, Button } from 'antd';\nimport axios from 'axios';\nimport './NoteList.less'\nimport 'antd/lib/menu/style/css'; \n\nclass NoteList extends Component {\n    state={}\n    constructor(props){\n        super(props);\n        this.state={notes:props.notes,selectedItem:-1}\n    }\n\n    componentWillReceiveProps(nextProps){\n        this.setState({notes:nextProps.notes})\n    }\n\n    render(){\n        var notes=this.state.notes;\n        var items=[];\n        var that = this;\n        notes.map((note,index)=>{\n            if(!note.folder){\n                items.push (\n                <Menu.Item\n                    key={index}\n                    selected={that.state.selectedItem === index}\n                    onClick={that.handleClick.bind(this,note,index)}>\n                    <Icon type=\"file-markdown\" theme=\"outlined\" />\n                    <span>{note.name}</span>\n                </Menu.Item> \n                )\n            } else {\n                items.push (\n                    <Menu.SubMenu \n                        key={index} \n                        title={<span><Icon type=\"folder\" theme=\"outlined\" /><span>{note.name} </span> </span>} \n                        onTitleClick={that.handleClick.bind(this,note,index)}>\n                            {\n                                (note.subitems||[]).map((item,idx)=>{\n                                   return <Menu.Item \n                                        key={index + \"-\" + idx} \n                                        onClick={that.handleClick.bind(this,item,idx)}>\n                                        <Icon type=\"file-markdown\" theme=\"outlined\" />\n                                        {item.name}\n                                    </Menu.Item>\n                                })\n                            }\n                    </Menu.SubMenu>\n                )\n            }\n        });\n        return (\n            <div className=\"NoteList\">\n                <Menu \n                    mode=\"inline\"\n                    theme=\"light\"\n                >\n                    {items}\n                </Menu>\n            </div>\n        );\n    }\n\n    handleClick = (note,index) => {\n        var gitBaseUrl ='https://api.github.com/repos/rayshaw001/books/contents/Note/';\n        var that = this;\n        if(note.folder){\n            var items = note.subitems || [];\n            if(items.length===0){\n                var _notes = this.state.notes;\n                axios.get(gitBaseUrl+note.fullPath).then(response=>{\n                    response.data.map((item,idx)=>{\n                        var noteNameIndex=item.name.toLocaleLowerCase().lastIndexOf(\".md\");\n                        items.push({\n                            name:noteNameIndex>0?item.name.substring(0,noteNameIndex):item.name,\n                            fullPath:note.name+\"/\"+item.name,\n                            folder:!(item.type===\"file\")\n                        })\n                    })\n                    _notes[index][\"subitems\"]=items;\n                    that.setState({\n                        notes:_notes\n                    })\n                })\n            }\n        }else{\n            if(!note.content){\n                axios.get(gitBaseUrl+note.fullPath).then(response=>{\n                    note[\"content\"]=decodeURIComponent(escape(window.atob(response.data.content)));\n                    this.props.handleOnItemClick(note.content);\n                })\n            }else{\n                this.props.handleOnItemClick(note.content);\n            }\n\n        }\n    } \n}\n\nexport default NoteList;\n\n/**\n * responses.data.map(note=>{\n                    notes.push({\n                        name: note.name,\n                        folder: false\n                    })\n                    this.setState({ notes: notes })\n                })\n *\n *                               content: decodeURIComponent(escape(window.atob(response.data.content))),\n */","import React, { Component } from 'react';\nimport './Header.less';\nimport { Avatar } from '@material-ui/core';\n\n\n\nclass Header extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        \n    }\n\n    render() {\n        let AvatarUrl = 'https://avatars3.githubusercontent.com/u/15726041';\n        let gitPageUrl = \"https://rayshaw001.github.io\";\n        return (\n            <div className=\"Header\">\n                <Avatar\n                    onClick={this.handleOnClick.bind(this, gitPageUrl)}\n                    alt=\"Ray Shaw\"\n                    src={AvatarUrl}\n                />\n            </div>\n        );\n    }\n\n    handleOnClick = (link) =>{\n        window.location=link;\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './Main.less';\n\nimport MarkDown from 'react-markdown';\nimport axios from 'axios';\nimport NoteList from '../NoteList/NoteList';\nimport Header from '../Header/Header';\n\nclass Main extends Component {\n    state={input:'',notes:[],noteTotalSize:0}\n    constructor(props){\n        super(props);\n    }\n    \n    componentDidMount(){\n        var baseUrl = 'https://api.github.com/repos/rayshaw001/books/contents/Note/';\n        var notes=[];\n        axios.get(baseUrl)\n            .then(responses => {\n                this.setState({noteTotalSize:responses.data.length});\n                responses.data.map(note=>{\n                    var noteNameIndex=note.name.toLocaleLowerCase().lastIndexOf(\".md\");\n                    notes.push({\n                        name: noteNameIndex>0?note.name.substring(0,noteNameIndex):note.name,\n                        fullPath:note.name,\n                        folder: !(note.type===\"file\")\n                    })\n                    this.setState({ notes: notes })\n                })\n            })\n    }\n\n    shouldComponentUpdate(nextProps,nextState){\n        return nextState.notes.length === this.state.noteTotalSize || this.state.input !== nextState.input;\n    }\n\n    render() {\n        return (\n            <div className=\"Main\">\n                <Header />\n                <div className='body'>\n                    <NoteList notes={this.state.notes} handleOnItemClick={this.handleOnItemClick.bind(this)}/>\n                    <MarkDown className='markdown' source={this.state.input} />\n                </div>\n            </div>\n        );\n    }\n\n    handleOnItemClick(content){\n        this.setState({ input: content})\n        /*\n        axios.get('https://api.github.com/repos/rayshaw001/books/contents/Note/K8s%20%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97.md')\n            .then(res => {\n                var text = decodeURIComponent(escape(window.atob(res.data.content))) \n            }\n        )\n        */\n    }\n}\n\nexport default Main;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './MainPage/Main';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}